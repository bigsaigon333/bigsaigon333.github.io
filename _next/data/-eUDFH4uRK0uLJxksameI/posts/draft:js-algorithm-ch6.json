{"pageProps":{"postData":{"id":"draft:js-algorithm-ch6","contentHtml":"<h2>6-1. 큐란?</h2>\n<h3>큐의 개념</h3>\n<ul>\n<li>큐 역시 임시 데이터를 처리하기 위해 디자인된 데이터 구조</li>\n<li>데이터를 처리하는 순서만 제외하면 많은 면에서 스택과 비슷</li>\n</ul>\n<h3>큐 예시</h3>\n<ul>\n<li>\n<p>극장에 줄 서 있는 사람들</p>\n</li>\n<li>\n<p>줄 맨 앞에 있는 사람이 그 줄을 떠나 가장 먼저 극장에 들어간다</p>\n<ul>\n<li>큐 역시 첫번째로 추가된 항목이 가장 먼저 제거된다</li>\n</ul>\n</li>\n<li>\n<p>First In, First Out</p>\n</li>\n<li>\n<p>큐는 주로 가로로 묘사</p>\n</li>\n<li>\n<p>큐의 시작은 앞(front), 뒤는 (back)으로 부른다. (head tail 이라고 부르기도 한다)</p>\n</li>\n</ul>\n<h3>큐 제약사항</h3>\n<ul>\n<li>\n<p>데이터는 큐의 끝에만 삽입할 수 있다 ⇒ 스택과 동일</p>\n</li>\n<li>\n<p>데이터는 큐의 앞에서만 삭제할 수 있다 ⇒ 스택과 정반대</p>\n</li>\n<li>\n<p>큐의 앞에 있는 원소만 읽을 수 있다. ⇒ 스택과 정반대</p>\n</li>\n<li>\n<p>enqueue: 큐에 데이터를 삽입</p>\n</li>\n<li>\n<p>dequeue: 큐에 서 데이터를 제거</p>\n</li>\n</ul>\n<h2>6-2. 큐 in JS</h2>\n<ul>\n<li>스택과 마찬가지로 배열을 이용한다 => 연결리스트를 이용하면 더 베스트이나, 연결리스트를 코딩테스트 때 구현하고 있을 시간이 없다.</li>\n<li>enqueue: push (스택과 동일)</li>\n<li>dequeue: shift ⇒ 그러나 배열에 M 개의 요소가 있다면 O(M) 이 소요된다\n<ul>\n<li>배열의 실제 크기는 줄이지 않고, 어디부터 끝까지를 큐로 볼지 정한다</li>\n<li>front 라는 변수 사용</li>\n</ul>\n</li>\n<li>front: arr[0] 또는 arr[front]</li>\n</ul>\n<h2>6-3. 문제풀이</h2>\n<h3>기본 문제</h3>\n<p><a href=\"https://www.acmicpc.net/problem/10845\">https://www.acmicpc.net/problem/10845</a></p>\n<p>https://www.acmicpc.net/problem/2164</p>\n<h3>응용 문제</h3>\n<p><a href=\"https://www.acmicpc.net/problem/11866\">https://www.acmicpc.net/problem/11866</a></p>\n<h3>JS 큐의 한계</h3>\n<ul>\n<li>속도가 느리거나, 메모리에 걸리거나</li>\n</ul>\n<ol>\n<li>일단 shift 로 한다</li>\n<li>안되면 head로 해본다</li>\n<li>다른 트리키한 방법을 떠올린다</li>\n</ol>\n<ul>\n<li>스택과 마찬가지로 배열을 이용한다 => 이중연결리스트를 이용하면 더 베스트이나, 연결리스트를 코딩테스트 때 구현하고 있을 시간이 없다.</li>\n</ul>\n","title":"Ch06. 큐","date":"2020-03-13","summary":"큐"}},"__N_SSG":true}