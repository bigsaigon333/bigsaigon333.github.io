{"pageProps":{"postData":{"id":"react-scripts-react-app-polyfill-promise-any","contentHtml":"<h2>I. 문제점</h2>\n<p>iOS 13 버젼의 기기에서 <code>Promise.any is not a function.</code> TypeError가 발생하여 <code>Promise.any</code>를 사용하는 기능들이 동작하지 않는 이슈가 발생하였다.</p>\n<p><code>react-app-polyfill</code>을 import 하고 있고, .browerslistrc 에 iOS 11 이상도 명시해두었기에 <code>Promise.any</code>의 polyfill도 자동으로 추가될 것이라 생각하였으나, 실제로는 추가되지 않은 것으로 보여졌다.</p>\n<h3>현황</h3>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-comment\">// package.json</span>\n<span class=\"hljs-attr\">\"dependencies\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">\"react-scripts\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"^5.0.0\"</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">\"react-app-polyfill\"</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">\"^3.0.0\"</span><span class=\"hljs-punctuation\">,</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// index.tsx</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"react-app-polyfill\"</span>;\n</code></pre>\n<h4><code>Promise.any</code>의 지원범위</h4>\n<p><img src=\"https://user-images.githubusercontent.com/31029000/170509567-cd21e2e3-d0f1-4efe-b20f-a1d3ca5de839.png\" alt=\"image\"></p>\n<h2>II. 해결책을 찾기 위한 접근방법</h2>\n<h3>1. react-app-polyfill 의 동작방법 조사</h3>\n<p><code>react-app-polyfill</code>은 <code>core-js/stable</code> 과 <code>runtime-generator</code> 를 import 하는 것이 동작의 전부이다.</p>\n<p><code>runtime-generator</code>는 iterator-iterable 프로토콜과 관련된 polyfill 이므로, <code>Promise.any</code> 와는 전혀 관련이 없다.</p>\n<p><code>core-js/stable</code>은 <code>core-js</code> 에 존재하는 수많은 polyfill 중 proposals를 제외한 stable한 기능의 polyfill만을 추가한다. 어떤 기능이 stable한 것인지는 <code>core-js</code> 버젼에 따라 상이하며, <a href=\"https://github.com/zloirock/core-js/blob/master/packages/core-js-compat/src/modules-by-versions.mjs\">링크</a>에서 <code>core-js</code> 버젼별 stable한 기능을 확인할 수 있다.</p>\n<h3>2. @babel/preset-env 동작방법 조사</h3>\n<p><code>babel</code>은 트랜스파일 과정에서 <code>@babel/preset-env</code> 을 이용하여 기존의 코드를 target 환경에서 동작하는 구문으로 변경하는데, target 환경이 지원하지 않는 JS 최신 문법이라면 polyfill을 추가할 수 있다. 단, <code>core-js</code>를 import하는 것이 필수적이다.</p>\n<p><code>@babel/preset-env</code>의 옵션 중 <code>useBuilltIns</code> 은 <code>@babel/preset-env</code> 가 어떻게 polyfill을 다룰 것인지 조정하는 옵션으로, <code>\"usage\" | \"entry\" | false</code> 의 값을 가질 수 있으며 default 값은 <code>false</code>이다. <code>false</code> 인 경우에는 polyfill을 추가하지 않는다.</p>\n<h4>useBuiltIns: \"usage\"</h4>\n<p><code>\"usage\"</code>로 설정한 경우, 기존의 코드에서 사용중인 기능을 target 환경에서 지원하지 않는다면 해당 기능에 대한 polyfill만 트랜스파일 시 추가한다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 트랜스파일 전</span>\n<span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 트랜스파일 후</span>\n\n<span class=\"hljs-comment\">// target 환경이 Map을 지원하지 않는 경우</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"core-js/modules/es.map\"</span>;\n\n<span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n\n<span class=\"hljs-comment\">// target 환경이 Map을 지원하는 경우</span>\n<span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n</code></pre>\n<h4>useBuiltIns: \"entry\"</h4>\n<p><code>\"entry\"</code> 로 설정한 경우, 기존의 코드내에서 어떤 기능을 사용하는지 상관없이 target 환경이 지원하지 않는 모든 기능의 polyfill을 추가한다. 이 때 <code>@babel/preset-env</code>는 <code>import \"core-js/stable\";</code> 구문을 target 환경이 지원하지 않는 기능에 대한 polyfill 각각의 모듈 import로 변경한다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 트랜스파일 전</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"core-js/stable\"</span>;\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 트랜스파일 후</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"core-js/modules/es.string.pad-start\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"core-js/modules/es.string.pad-end\"</span>;\n<span class=\"hljs-comment\">// ...</span>\n</code></pre>\n<p>target 환경이 지원하지 않는 기능을 판단하기 위해 <code>@babel/preset-env</code>에 <code>\"corejs\"</code> 로 버젼을 지정할 수 있다. 실제로 설치된 <code>core-js</code> 버젼과 무관하게, 지정해준 <code>corejs</code> 버젼에 의해 어떤 polyfill의 import로 변경되는지가 결정된다.</p>\n<p><a href=\"https://babeljs.io/docs/en/babel-preset-env#usebuiltins-entry\">https://babeljs.io/docs/en/babel-preset-env#usebuiltins-entry</a></p>\n<p><a href=\"https://babeljs.io/docs/en/babel-preset-env#corejs\">https://babeljs.io/docs/en/babel-preset-env#corejs</a></p>\n<h3>3. babel-preset-react-app 동작방법 조사</h3>\n<p><code>react-scripts</code> 는 내부적으로 <code>babel-preset-react-app</code> 이라는 라이브러리를 사용해서 babel 의 각종 preset을 설정하고 있다.</p>\n<p><code>babel-preset-react-app</code> 은 위에서 언급한 <code>@babel/preset-env</code> 외에도 <code>@babel/preset-react</code>, <code>@babel/preset-typescript</code> 등 각종 preset을 처리한다.</p>\n<h2>III. 문제의 원인 파악</h2>\n<p><code>babel-preset-react-app</code>은 <code>@babel/preset-env</code>를 설정할 때 다음과 같은 옵션값을 주고 있다.</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-attr\">presets</span>: [\n    <span class=\"hljs-comment\">// Latest stable ECMAScript features</span>\n    <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"@babel/preset-env\"</span>).<span class=\"hljs-property\">default</span>,\n    {\n      <span class=\"hljs-comment\">// Allow importing core-js in entrypoint and use browserlist to select polyfills</span>\n      <span class=\"hljs-attr\">useBuiltIns</span>: <span class=\"hljs-string\">\"entry\"</span>,\n      <span class=\"hljs-comment\">// Set the corejs version we are using to avoid warnings in console</span>\n      <span class=\"hljs-attr\">corejs</span>: <span class=\"hljs-number\">3</span>,\n      <span class=\"hljs-comment\">// Exclude transforms that make all code slower</span>\n      <span class=\"hljs-attr\">exclude</span>: [<span class=\"hljs-string\">\"transform-typeof-symbol\"</span>],\n    },\n    <span class=\"hljs-comment\">// ...</span>\n  ];\n}\n</code></pre>\n<p><code>@babel/preset-env</code> 의 옵션으로 <code>useBuiltins</code>에는 <code>\"entry\"</code>로, <code>corejs</code> 는 3을 할당하고 있다.</p>\n<p>따라서 <code>import \"react-app-polyfill\"</code> 에 의해 import 되는 <code>\"core-js/stable\"</code>을 각각의 개별적인 polyfill 모듈으로 변환 할 때 corejs 3.0.0 을 기준으로 어떤 기능이 stable한지를 판단한다.\n(3 은 문자열로 변환시 \"3\" 이고 이는 semver 기준 \"3.0.0\"을 의미함)</p>\n<p><strong>corejs 3.7부터 <code>Promise.any</code>는 stable한 기능에 포함되기 때문에 <code>Promise.any</code>는 proposals에 해당하여 Promise.any에 대한 polyfill 은 추가되지 않았던 것이다.</strong></p>\n<p><a href=\"https://github.com/zloirock/core-js/blob/master/packages/core-js-compat/src/modules-by-versions.mjs\">https://github.com/zloirock/core-js/blob/master/packages/core-js-compat/src/modules-by-versions.mjs</a>)</p>\n<h2>IV. 해결책</h2>\n<p><code>react-app-rewired</code> 로 <code>react-scripts</code>의 <code>webpack</code> 설정을 변경할 수 있지만, <code>react-scripts</code>의 직접적인 <code>webpack</code> 설정이 아닌 <code>react-scripts</code>의 내부에서 사용되는 <code>babel-preset-react-app</code> 의 설정을 변경하여야 하므로, 불가능한 건 아니지만 매우 번거롭고 현실적으로 어렵다고 볼 수 있다.</p>\n<p>따라서 core-js를 별도로 설치한 후에 <code>Promise.any</code>의 polyfill을 명시적으로 import 해준다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"core-js/proposals/promise-any\"</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"react-app-polyfill\"</span>;\n</code></pre>\n<p><code>core-js</code> 3.0.0 기준 <code>Promise.any</code>는 proposals 이므로, <code>\"core-js/proposals/promise-any\"</code>를 import 한다.</p>","title":"react-scripts 에서 Promise.any polyfill 추가하기","date":"2022-06-01T00:00:00.000Z","description":"","keywords":[]},"_superjson":{"values":{"postData.date":["Date"]}}},"__N_SSG":true}