{"pageProps":{"postData":{"id":"draft:undefined-in-react-ts","contentHtml":"<h3>1. undefined vs null</h3>\n<p>undefined와 null은 비슷하지만 다릅니다. 동등 연산자(<code>==</code>)로 비교하면 <code>undefined == null // true</code>이며, 둘다 값이 없음을 나타낸다는 의미론적인 측면에서 유사성을 보입니다.</p>\n<p>다만, 세부적인 측면을 살펴보면 <code>undefined</code>와 <code>null</code>의 차이를 많이 찾아볼 수 있습니다.</p>\n<ul>\n<li><code>Number(undefined) === NaN</code> 인 반면, <code>Number(null) === 0</code> 입니다.</li>\n<li>함수의 반환값을 명시하지 않으면 <code>undefined</code>가 반환됩니다.</li>\n<li>함수를 호출할 때 인자를 전달하지 않으면 해당 인자는 <code>undefined</code>가 할당됩니다.</li>\n<li>default parameter는 속성의 값이 <code>undefined</code> 일 때만 할당됩니다. (<code>null</code> 일 때는 할당되지 않는다.)</li>\n<li><code>let, var</code>로 선언한 변수의 초기값을 할당하지 않으면 <code>undefined</code>가 할당된다.</li>\n</ul>\n<p>타입스크립트에서 <code>undefined</code>의 쓰임새는 극히 제한됩니다. <code>let</code>으로 선언한 변수에 초기값을 할당하지 않은 경우, <code>undefined</code>로 초기화되지만, 최근에는 대부분의 변수를 <code>const</code>로 선언하여 불변값으로 유지하기 때문에 <code>undefined</code>로 초기화되는 let 선언 변수는 안티패턴으로 간주되어 거의 볼 수 없습니다.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// 안티패턴</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">num</span>: <span class=\"hljs-built_in\">number</span>;\nnum = <span class=\"hljs-number\">3</span>;\nnum = <span class=\"hljs-number\">4</span>;\n\n<span class=\"hljs-comment\">// recommended</span>\n<span class=\"hljs-keyword\">const</span> num = <span class=\"hljs-number\">3</span>;\n<span class=\"hljs-keyword\">const</span> num2 = <span class=\"hljs-number\">4</span>;\n</code></pre>\n<h3>2. undefined를 명시적으로 할당하는 경우</h3>\n<p>그럼에도 불구하고 <code>undefined</code>를 명시적으로 할당하는 경우가 프로젝트에서 꽤 있는데, 대표적으로 다음과 같은 경우를 들 수 있습니다.</p>\n<h4>2.1. 객체를 JSON 직렬화 시 undefined 값을 가진 프로퍼티를 제거하기 위해</h4>\n<p>JSON의 정의에 <code>undefined</code>는 없습니다. 따라서 <code>JSON.stringfy({a: undefined})</code>를 호출하면 <code>a</code> 속성은 제거되어 <code>\"{}\"</code> 가 반환됩니다. 서버에 ajax 통신으로 post 요청을 보내는 경우, 특정 조건일 경우에만 body에 특정 값을 추가하여 보내고 싶은 경우에, 해당 객체의 값을 <code>undefined</code>로 할당한 후 JSON 직렬화하여 보내는 경우가 있습니다.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> memberId = isFamilyOrder ? memberId : <span class=\"hljs-literal\">undefined</span>;\n<span class=\"hljs-keyword\">const</span> body = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({ memberId }); <span class=\"hljs-comment\">// isFamillyOrder가 false인 경우에 \"{}\"가 된다</span>\n\n<span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">\"/api/\"</span>, { <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"post\"</span>, body });\n</code></pre>\n<p>위와 같은 목적을 달성하기 위해서 아래와 같은 코드를 보게 될 수도 있다.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> d = a?.<span class=\"hljs-property\">b</span>?.<span class=\"hljs-property\">c</span> ?? <span class=\"hljs-literal\">undefined</span>; <span class=\"hljs-comment\">// null 을 undefined로 바꾸기 위해 사용된다.</span>\n<span class=\"hljs-keyword\">const</span> e = { d };\n<span class=\"hljs-keyword\">const</span> body = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(e); <span class=\"hljs-comment\">// a?.b?.c 가 null 또는 undefined일 경우 '{}' 가 반환됩니다</span>\n</code></pre>\n<h4>2.2. 컴포넌트 props의 타입이 optional인 경우, 값을 undefined 로 설정하여 optional을 흉내낸다</h4>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Props</span> {\n  memberId?: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Component</span> = ({ memberId }: <span class=\"hljs-title class_\">Props</span>): <span class=\"hljs-variable constant_\">JSX</span>.<span class=\"hljs-property\">Element</span> => {\n  <span class=\"hljs-keyword\">return</span> ...\n};\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">App</span> = (): <span class=\"hljs-variable constant_\">JSX</span>.<span class=\"hljs-property\">Element</span> => {\n  <span class=\"hljs-keyword\">const</span> memberId = <span class=\"hljs-string\">\"abcd1234\"</span>;\n  <span class=\"hljs-comment\">// ...</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Component</span> <span class=\"hljs-attr\">memberId</span>=<span class=\"hljs-string\">{isFamilyOrder</span> ? <span class=\"hljs-attr\">memberId</span> <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">undefined</span>} /></span></span>;\n};\n\n</code></pre>\n<p><code>Props</code>의 <code>memberId</code>속성은 optional type입니다. 즉, memberId는 존재한다면 string이고 존재하지 않을 수도 있다는 뜻입니다. 다만, 타입스크립트는 별도의 설정을 하지 않는 이상 <code>memberId</code> 속성의 값이 <code>undefined</code> 인 경우도 optional type과 동일하게 타입 세잎하다고 보기 때문에 해당 속성이 항상 존재하지만 해당 값을 <code>undefined</code>로 할당하여 optional type을 흉내낼 수 있습니다.\n하지만 해당 속성에 <code>null</code>을 할당하면 이는 optional type이 아니라 <code>null</code> 값을 union으로 가지는 것과 동일하다고 봅니다.</p>\n<h3>3. undefined와 null을 어떻게 써야 할까요</h3>\n<p>아직 정해지지 않았다는 의미의 <code>undefined</code> 를 개발자가 직접 변수에 할당하여 변수의 값으로 정하는 것은 <code>undefined</code> 본연의 의미를 생각해볼 때 부자연스럽다고 할 수 있습니다.</p>\n<h4>3.1 명시적으로 없음을 나타낼 때에는 null 을 할당한다</h4>\n<p>JSON 직렬화시에 <code>null</code>을 제거하기 위해서는 query-string 과 같은 라이브러리를 쓰는 방법도 있고, 아래와 같이 <code>JSON.stringify</code>의 두번째 인자로 replacer를 전달하여 <code>null</code>이 직렬화되는 걸 막을 수도 있습니다.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> replacer = (<span class=\"hljs-attr\">_</span>: <span class=\"hljs-built_in\">string</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">unknown</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">unknown</span> =></span>\n  value == <span class=\"hljs-literal\">null</span> ? <span class=\"hljs-literal\">undefined</span> : value;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> stringify = (<span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">unknown</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">string</span> =></span>\n  <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(value, replacer);\n</code></pre>\n<h4>3.2 타입을 계속 좁혀가는 방향으로 사용합니다</h4>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> add = (<span class=\"hljs-attr\">a</span>: <span class=\"hljs-built_in\">number</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-built_in\">number</span>): <span class=\"hljs-function\"><span class=\"hljs-params\">number</span> =></span> a + b;\n\n<span class=\"hljs-keyword\">const</span> sum = (<span class=\"hljs-attr\">a</span>: <span class=\"hljs-built_in\">number</span>[] | <span class=\"hljs-literal\">null</span> = []): <span class=\"hljs-function\"><span class=\"hljs-params\">number</span> =></span> {\n  <span class=\"hljs-keyword\">const</span> nums = a ?? [];\n\n  <span class=\"hljs-keyword\">return</span> nums.<span class=\"hljs-title function_\">reduce</span>(add, <span class=\"hljs-number\">0</span>);\n};\n</code></pre>\n<p>예를 들어 a:string 의 '' 과 null 과 undefined가 모두 동일한 의미를 가지는가?\n그렇다면 <code>const b = a ?? ''</code> 와 같이 사용해라.</p>\n<h4>3.3 tsconfig의 exactOptionalPropertyTypes 설정을 true로 설정한다</h4>\n<p>undefined 값을 할당하여 optional type을 흉내내는 것은 타입체킹 시점의 타입과 실제 런타임에서의 타입을 상이하게 만듭니다. 즉, 런타임에서 객체의 해당 속성이 존재하며 값이 <code>undefined</code>이기 때문에 <code>in</code> 연산자를 통하여 객체의 속성을 검사한다면 이는 의도한 것과 다른 결과를 보입니다.</p>\n<p>따라서 타입스크립트 4.4에 도입된 exactOptionalPropertyTypes 설정을 true로 설정하면, optional type이 정말로 객체 내에 없다는 것을 보장합니다. 즉, optional type을 사용한 값에 <code>undefined</code>를 할당하는 것을 허용하지 않습니다.</p>","title":"타입스크립트에서 undefined의 쓰임새","date":"2022-08-22"}},"__N_SSG":true}