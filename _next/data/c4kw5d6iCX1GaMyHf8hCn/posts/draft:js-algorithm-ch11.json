{"pageProps":{"postData":{"id":"draft:js-algorithm-ch11","contentHtml":"<h2>11-1. 동적계획법이란</h2>\n<p>Dynamic Programming 은 이름만 가지고는 무엇을 하는지 유추하기가 어렵습니다.</p>\n<p>dynamic programming 이라는 단어는 최적화 문제를 연구하는 수학 이론에서 왔습니다.</p>\n<p>흔히 전산학에서는 dynamic 이라는 단어는 컴파일 타임이 아닌 런타임에 무언가를 수행한다는 의미를 나타내는데, 이는 Dynamic Programmig의 dynamic 과는 전혀 상관이 없습니다.</p>\n<p>또한 programming 또한 전산학에서 프로그램을 작성한다는 의미의 프로그래밍이 아니라, 최적화 연구 분야에서 최적의 프로그램을 찾아낸다는 의미로 사용되는 말입니다.</p>\n<p>따라서 dynamic programming의 적절한 번역은 동적 계획법입니다.</p>\n<h2>11-2. 선형탐색</h2>\n<h3>배열에서 탐색</h3>\n<p>일반적인 경우 앞에서부터 하나씩 원하는 값인지 확인해본다 => 선형 탐색</p>\n<h3>해시테이블: 객체, Map, Set</h3>\n<p>얻고자 하는 키값을 알고 있다면 O(1) 으로 가능\n모른다면, 값을 배열으로 변환하여 탐색</p>\n<p>탐색에서 중요한건 무엇을 어떻게 탐색하느냐</p>\n<p>어떻게 탐색하느냐는 내장 메서드로 충분한 것 같다. 예외 케이스 두가지: 머지 소트, 카운팅 소트 소개</p>\n<p>무엇을 탐색하느냐가 알고리즘 문제에 핵심</p>\n<h3>내장메서드 소개</h3>\n<p>배열: find, findIndex</p>\n<p>객체: Object.values(obj)</p>\n<p>Map: [...map.values()]</p>\n<p>Set: [...set]</p>\n<h2>11-3. 이진탐색이란?</h2>\n<p>정렬된 배열에서는 O(logN)으로 빠르게 찾는 방법이 있다.</p>\n<p>재귀로 간단하게.</p>\n<h2>11-4. 이진탐색 문제풀이</h2>\n<h3>여러방법으로 문제 풀기</h3>\n<p>includes (X)\nSet으로 그냥 풀기 (O)\n이진탐색으로 풀기(O)</p>\n<p><a href=\"https://www.acmicpc.net/problem/1920\">https://www.acmicpc.net/problem/1920</a></p>\n<h3>이진탐색 응용: 갯수세기</h3>\n<p><a href=\"https://www.acmicpc.net/problem/10816\">https://www.acmicpc.net/problem/10816</a></p>\n<p>target 과 가장 가까운 숫자를 찾는다고 생각하는게 편하다\ntarget과 가장 가까우면서 큰 숫자 - target과 가장 가까우면서 작은 숫자 - 1</p>\n<p>존재하지 않는다면 start, end로 끝나서 결국 하나 차이로 끝난다 => 0 이 됨</p>\n<h2>11-5. 이진탐색 응용: Parametric Search</h2>\n<h3>유형 1. 완전탐색</h3>\n<ul>\n<li>\n<p>완전 탐색과 같다. 그런데 값을 넣었을 때 나온 반환값으로 답이 현재 답보다 작은지 큰지를 파악할 수 있다. 즉, 답의 범위를 이분 탐색으로 좁혀갈 수 있다.</p>\n</li>\n<li>\n<p>답이 1부터 MAX까지 선형적으로 존재하는 상황. 답이 정렬되어 있으므로 별도로 숫자를 정렬하지는 않는다.</p>\n</li>\n</ul>\n<p>포인트 1. 답의 범위를 정확히 나눈다</p>\n<p>포인트 2. 소문제의 반환값이 나왔을 때 답이 증가해야하는지 감소해야하는지 방향성을 정확히 이해. 소문제의 반환값과 답의 상관관계를 정확히 파악</p>\n<p>포인트 3. 최대값, 최소값의 경우 갯수세기와 마찬가지로 계속해서 탐색해가야 한다. 이진탐색에서는 같은 값을 내더라도 실제 문제의 답은 더 커지거나 작아질 수 있기 때문에</p>\n<h2>11-6. Parametric Search 문제풀이</h2>\n<h3><a href=\"https://www.acmicpc.net/problem/1654\">https://www.acmicpc.net/problem/1654</a></h3>\n<h3><a href=\"https://www.acmicpc.net/problem/2805\">https://www.acmicpc.net/problem/2805</a></h3>\n<p>재귀로 이진탐색 구현 => 꼬리물기 최적화에 의해 바로 루프문으로 기계적으로 바꿀 수 있는 것을 보인다.</p>\n<p>즉, 원리를 이해하는 것이 중요. 그러면 구현은 얼마<a href=\"https://regexr.com/6hub1%EB%93%A0%EC%A7%80\">https://regexr.com/6hub1든지</a> 바꿀 수 있다.</p>\n<h3><a href=\"https://www.acmicpc.net/problem/2110\">https://www.acmicpc.net/problem/2110</a></h3>\n<p>색다른 시각에서의 문제 보기\n주어진 조건에 맞는 답을 찾는게 아니라, 가능한 답 안에서 주어진 조건을 맞추는 걸 찾는다</p>","title":"Ch11. 동적계획법","date":"2020-03-22","summary":"동적계획법, 다이나믹 프로그래밍"}},"__N_SSG":true}