{"pageProps":{"postData":{"id":"draft:regular-expression-1","contentHtml":"<p>※ 이 글은 정규표현식을 사용해본 적은 있지만 정규표현식에 자신이 없는 개발자들을 대상으로 하고 있습니다.</p>\n<p>※ 이 글을 읽고 나면 정규표현식 작성에 조금 자신을 가지게 됩니다.</p>\n<p>※ 이 글에서 정규표현식은 자바스크립트 정규표현식 리터럴의 형태로 기술합니다. 즉, <code>/a(b|c)/</code>와 같이 기술되어 있는 것은 모두 정규표현식입니다.</p>\n<h2>I. 정규표현식이란</h2>\n<h3>정규표현식이란 <strong>문자열의 패턴을 표현하기 위한 작성법</strong>입니다</h3>\n<p>예를 들어 <code>0부터 9 사이에 있는 하나의 숫자</code> 라는 패턴을 정규표현식에서는 <code>/0|1|2|3|4|5|6|7|8|9/</code> , <code>/[0-9]/</code> 또는 <code>/\\d/</code>로 나타낼 수 있습니다.</p>\n<p>또한 <code>apple, tomato, pineapple이 순서와 상관없이 모두 포함된 문자열</code>은 <code>/(?=.*apple)(?=.*tomato)(?=.*pineapple)/</code> 으로, <code>tomato가 3번 이상 존재하는 문자열</code> 은 <code>/(.*\\btomato\\b.*){3}/</code> 으로 나타낼 수 있습니다.</p>\n<p>즉, 문자열의 패턴을 컴퓨터가 이해할 수 있게끔 명확하게 표현하는 방법이 정규표현식입니다.</p>\n<h3>주어진 문자열이 정규표현식에 일치한다란?</h3>\n<p>주어진 문자열에 정규표현식으로 기술한 문자열의 패턴이 포함되어 있는 경우, 주어진 문자열이 정규표현식에 일치한다 라고 합니다</p>\n<p>예를 들어, <code>a</code> 는 숫자가 아니므로 <code>/0|1|2|3|4|5|6|7|8|9/</code> 에 일치하지 않지만 <code>3</code>은 <code>/0|1|2|3|4|5|6|7|8|9/</code>에 일치합니다.</p>\n<p>또한, <code>1bc</code>, <code>a2c</code>, <code>ab3</code> 모두 정규표현식 <code>/0|1|2|3|4|5|6|7|8|9/</code>에 일치합니다. 왜냐하면 정규표현식이 의미하는 <code>0부터 9 사이에 있는 하나의 숫자</code>라는 패턴이 각 문자열에 모두 존재하기 때문입니다. <code>1bc</code>는 첫번째 문자인 <code>1</code>이, <code>a2c</code>는 두번째 문자인 <code>2</code>가, <code>ab3</code>의 경우 세번째 문자인 <code>3</code>이 <code>0부터 9 사이에 있는 하나의 숫자</code>에 해당하여 주어진 정규표현식에 일치합니다.</p>\n<h2>II. 정규표현식이 사용되는 상황</h2>\n<p>자바스크립트에서 정규표현식의 가장 기본적인 사용법은 주어진 문자열에서 정규표현식으로 기술되는 문자열의 패턴을 검색하는 것입니다.</p>\n<p>검색한 결과가 있다면 주어진 문자열이 정규표현식에 일치하는 것을 알 수 있습니다.\n검색한 결과가 없다면 주어진 문자열에 정규표현식으로 표현되는 패턴에 존재하지 않는다, 즉 주어진 문자열이 정규표현식에 일치하지 않는 것을 알 수 있습니다.</p>\n<p>이를 응용하면 정규표현식에 일치하는 부분 문자열이 무엇이었는지 특정하거나, 해당 부분 문자열을 다른 문자열로 치환하거나, 빈문자열로 치환하여 삭제하는 것도 가능해집니다.</p>\n<p>또한, 정규표현식의 문자열 처음, 문자열 끝을 나타내는 메타문자를 활용한다면 문자열 전체를 대상으로 한 패턴을 기술할 수도 있습니다. 이를 이용하여 주어진 문자열 그 자체가 정규표현식에 일치하는지를 검색하여, 전체 문자열을 검증할 수도 있습니다.</p>\n<h2>III. 정규표현식 기본 연산자</h2>\n<p>정규표현식의 기본 연산자로 3가지가 있습니다. 이 3가지만 안다면 왠만한 정규표현식은 다 이해할 수 있으며 기술할 수 있게 됩니다.</p>\n<h3>1. 접합 연산자</h3>\n<p>알파벳 <code>a</code>는 <code>/a/</code>로 나타낼 수 있으며, 알파벳 <code>b</code>는 <code>/b/</code>로 나타낼 수 있습니다.\n그렇다면 알파벳 <code>a</code>와 알파벳 <code>b</code>가 접합해 있는 문자열 <code>ab</code>를 정규표현식으로는 어떻게 나타낼까요?\n<code>/ab/</code>와 같이 나타냅니다. 즉, 접합 연산자는 별도의 기호가 없습니다.</p>\n<h3>2. 선택 연산자: <code>|</code></h3>\n<p><code>a</code> 또는 <code>b</code> 와 같은 패턴을 나타낼 때 선택 연산자 <code>|</code>를 사용하며, <code>/a|b/</code> 와 같이 정규표현식으로 나타낼 수 있습니다.</p>\n<p>예를 들어 <code>banana</code> 또는 <code>apple</code> 을 포함하고 있는 문자열 패턴은 <code>/banana|apple/</code> 로 기술할 수 있습니다.</p>\n<p>접합 연산자는 선택 연산자보다 우선순위가 높기 때문에 <code>|</code> 보다 <code>banana</code>, <code>apple</code>가 먼저 계산이 되어 의도한 대로 작동합니다.</p>\n<p>만약 <code>yellow banana</code> 또는 <code>yellow mango</code> 를 포함하고 있는 문자열 패턴을 기술하기 위해서는 <code>/yellow (banana|mango)/</code> 와 같이 괄호(<code>()</code>)를 추가하여 우선순위를 명확히 해줘야 합니다.\n<code>/yellow banana|mango</code>/는 <code>yellow banana</code> 또는 <code>mango</code>를 의미합니다. (공백문자`` 도 문자이기 때문에 접합연산자의 대상이 됩니다)</p>\n<h3>3. 반복 연산자: *</h3>\n<p>연산자 앞의 문자가 0번 이상 반복됨을 나타냅니다.</p>\n<p><code>/a*/</code>는 빈문자열, <code>a</code>, <code>aa</code>, <code>aaa</code>, <code>aaaa</code>, <code>aaaaa</code> ... 과 일치합니다.</p>\n<h2>III. 정규표현식 기본 연산자와 관련된 문법들</h2>\n<h3>1. 우선순위: 반복 연산자 > 접합 연산자 > 선택 연산자</h3>\n<p>반복 연산자(<code>*</code>)의 우선순위가 제일 높고 그 다음 접합 연산자, 마지막으로 선택 연산자(<code>|</code>)입니다.</p>\n<p>예를 들어 <code>/ab|c*/</code>는 어떤 문자열 패턴을 의미할까요?</p>\n<p>우선순위를 명확히 보여주기 위해 괄호를 추가해보겠습니다</p>\n<p><code>/(ab)|(c*)/</code> 즉, <code>ab</code> 또는 <code>c</code>가 0번 이상 반복되는 문자열을 의미합니다.</p>\n<p><code>ab</code>, 빈문자열, <code>c</code>, <code>cc</code>, <code>ccc</code> ... 등이 위의 정규표현식에 일치합니다.</p>\n<p>연산자 간의 우선순위를 바꾸고 싶다면 괄호(<code>()</code>)를 추가하면 됩니다.</p>\n<p><code>/a(b|c*)/</code> 는 이제 <code>/ab|c*/</code> 와 다르게 <code>ab</code> 또는 <code>ac*</code> 를 의미합니다.</p>\n<h3>2. Syntax Sugar: <code>[]</code>, 문자열 클래스, <code>?</code>, <code>+</code>, <code>{}</code></h3>\n<p>선택 연산자를 이용해서 <code>0부터 9사이에 있는 하나의 숫자</code>를 나타낸다면 <code>/0|1|2|3|4|5|6|7|8|9/</code> 가 됩니다. 하지만 이는 너무 번거롭습니다.\n<code>0부터 9사이에 있는 하나의 숫자</code>가 연속된 문자열, 즉 <code>00</code>, <code>01</code>, <code>24</code>, <code>35</code>, <code>99</code> 등을 나타내려면</p>\n<p><code>/(0|1|2|3|4|5|6|7|8|9)(0|1|2|3|4|5|6|7|8|9)/</code> 와 같이 나타내야 합니다.</p>\n<p>이를 간단하기 기술하기 위한 문법적 설탕, Syntax Sugar가 여러가지 있습니다.</p>\n<h4>1) []</h4>\n<p><code>[]</code>는 선택 연산자를 간단하게 기술하기 위한 방법입니다. <code>/[0123456789]/</code>는 <code>/0|1|2|3|4|5|6|7|8|9/</code>와 동일합니다. 즉, 여러개의 문자 중 하나만을 의미하게 하고 싶을 때에는 꺽쇠 괄호(<code>[]</code>) 안에 여러개의 문자를 기술하면 됩니다.\n<code>[]</code>는 하나의 문자만을 의미하기 때문에 <code>/ab|c/</code> 와 같은 경우는 <code>[]</code>를 이용해서 나타낼 수 없습니다.</p>\n<p>또한 <code>[]</code> 내에서 <code>-</code> 를 사용하여 범위를 나타낼 수 있습니다. <code>/[0123456789]/</code>는 <code>/[0-9]/</code> 와 같이 나타낼 수 있습니다. <code>-</code>의 정확한 의미는 아스키 코드(또는 유니코드)로 나타낸 문자의 범위를 의미합니다. 0은 <code>0x30</code> 이며 1은 <code>0x31</code>, 2는 <code>0x32</code> 입니다. 9는 <code>0x39</code>이므로, <code>/[0-9]/</code>는 <code>0x30</code> 부터 <code>0x39</code>까지의 모든 문자를 나타내며 <code>0x30</code>과 <code>0x39</code>도 포함됩니다.</p>\n<p><code>-</code> 를 사용할 때 주의점은 반드시 앞 뒤에 문자가 와야한다는 점입니다. <code>/[-9]/</code> 은 <code>-</code> 또는 <code>3</code>을 나타내며, <code>0x00</code> 부터 <code>0x39</code> 사이의 하나의 문자를 의미하지 않습니다. 또한 <code>/[9-0]/</code>과 같은 표현은 유효한 정규표현식이 아니기 때문에 선언시 에러가 발생합니다.</p>\n<p><code>[^0-9]</code> 와 같이 꺽쇠 괄호 내에 carrot(<code>^</code>) 을 추가할 수도 있는데요, <code>^</code>은 부정의 의미를 나타내며 <code>0부터 9사이에 있는 하나의 숫자가 아닌 모든 문자</code>를 의미합니다.\n즉, <code>a</code> <code>$</code> <code>~</code> 모두 정규표현식과 일치하지만 <code>0</code> <code>1</code> <code>2</code> 등은 정규표현식과 일치하지 않습니다.</p>\n<p>참고로 <code>.</code>은 정규표현식에서 쓰이는 특수기호로서 아무런 문자 하나, 즉 모든 문자 하나를 의미합니다. 빈문자열을 제외한 모든 문자열은 <code>/./</code>에 일치하게 됩니다.</p>\n<h4>2) 문자열 클래스</h4>\n<p><code>0부터 9사이에 있는 하나의 숫자</code>, 공백문자, 알파벳 대소문자와 숫자 및 언더바(<code>_</code>) 등 자주 사용되는 문자들의 집합은 이미 정규표현식에 정의가 되어 있습니다.</p>\n<p>예를 들어 <code>0부터 9사이에 있는 하나의 숫자</code>, 즉 <code>[0-9]</code>는 <code>\\d</code> 로 사용할 수 있습니다.\n스페이스, 탭, 뉴라인, 캐리지 리턴 등 각종 공백문자, 즉 <code>/[f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]/</code>는 <code>\\s</code>로 사용할 수 있습니다.\n알파벳 대소문자와 숫자 및 언더바(_) , 즉 <code>/[0-9a-zA-Z_]/</code>는 <code>\\w</code>로 사용할 수 있습니다.</p>\n<p><code>\\D</code>, <code>\\S</code>, <code>\\W</code>는 <code>/[^\\d]/</code>, <code>/[^\\s]/</code>, <code>/[^\\w]/</code> 와 일치합니다.</p>\n<h4>?, +, {}</h4>\n<p><code>?</code> 는 0개 또는 1개를 나타냅니다.</p>\n<p><code>banana</code> 또는 <code>bananas</code>를 나타내고 싶을 때 <code>/banana(|s)/</code> 로 나타낼 수도 있지만 <code>/bananas?/</code>로 기술할 수도 있습니다.</p>\n<p><code>+</code> 는 1개 이상을 의미합니다.</p>\n<p><code>/a+/</code> 는 <code>/aa*/</code> 과 동일합니다.</p>\n<p><code>{}</code>를 이용하면 특정한 수량의 반복을 나타낼 수 있습니다.\n예를 들어 <code>banana</code> 를 나타내기 위해 <code>/ba(na){2}/</code> 와 같이 기술할 수 있습니다.\n<code>nana</code> 는 <code>na</code>가 2번 반복되므로 반복되는 횟수를 <code>{2}</code>와 같이 적어서 표현하였습니다.</p>\n<p><code>aaa</code> 또는 <code>aaaa</code> 즉, a가 3번 이상 4번 이하 반복되는 문자열 패턴을 나타내기 위해서는 <code>/a{3,4}/</code> 와 같이 기술할 수 있습니다.</p>\n<p><code>a</code>가 3번 이상 반복되는 문자열은 <code>/a{3,}</code>로 나타낼 수 있습니다.</p>\n<p><code>?</code>, <code>+</code>, <code>{}</code>는 반복 연산자와 동일한 우선순위를 갖습니다. 따라서 접합연산자보다 우선순위가 높습니다. 따라서 <code>/bana{2}/</code> 와 같이 기술한다면 <code>/banaa/</code>를 의미하게 됩니다.</p>\n<h2>IV. 예시</h2>\n<p>간단한 예시를 통해 정규표현식 기본 연산자만으로 어떠한 것들을 할 수 있는지 알아보겠습니다.</p>\n<h3>1) 주문하기시 라이더님께 요청사항에 금지된 단어가 포함되어 있는지 확인</h3>\n<p>배달의 민족 어플의 주문하기 페이지에는 가게 사장님께 요청사항과 라이더님께 요청사항 기재란이 있습니다.</p>\n<p>예를 들어 라이더님께 요청사항에 <code>빨리</code> <code>빠르게</code> <code>퀵</code> <code>스피디</code>라는 단어는 포함할 수 없다고 가정해보겠습니다.</p>\n<p>요청사항에 해당 문자열이 포함되어 있는지 어떻게 알 수 있을까요?</p>\n<p>선택 연산자를 이용하면 <code>빨리</code> 또는 <code>빠르게</code> 또는 <code>퀵</code> 또는 <code>스피디</code> 라는 문자열 패턴을 간단하게 나타낼 수 있습니다.</p>\n<p>따라서 요청사항이 해당 정규표현식에 일치한다면 요청사항에 <code>빨리</code>, <code>빠르게</code>, <code>퀵</code>, <code>스피디</code> 라는 단어가 포함된 것임을 알 수 있습니다.</p>\n<p>자바스크립트로 나타내면 다음과 같습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">hasBannedWords</span>(<span class=\"hljs-params\">requestMessage</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`/빨리|빠르게|퀵|스피디/`</span>.<span class=\"hljs-title function_\">test</span>(requestMessage);\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">hasBannedWords</span>(<span class=\"hljs-string\">\"빠르게 와주세요\"</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">hasBannedWords</span>(<span class=\"hljs-string\">\"초인종 누르지 말아주세요\"</span>)); <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<p><code>RegExp.prototype.test</code>는 인자로 주어진 문자열이 정규표현식에 일치하는지 여부를 boolean으로 반환합니다.</p>\n<h3>2) 생년월일 검증</h3>\n<p>생년월일이 <code>YYYY-MM-DD</code> 형식으로 주어진다고 할 때 유효한 생년월일인지 정규표현식을 이용해서 검증해보겠습니다. 문제를 간단히 하기 위해 윤년은 고려하지 않으며, 유효한 연도는 1900년부터 2022년을 의미한다고 가정하겠습니다.</p>\n<h4>유효한 연도를 정규표현식으로 나타내기</h4>\n<p>선택 연산자를 이용한다면 <code>/1900|1901|1902| ... 2021|2022/</code> 와 같이 나타낼 수 있습니다. 하지만 122개를 모두다 기술할 수는 없습니다. 먼저 1900 ~ 2022년을 3가지 구간으로 나누겠습니다.</p>\n<ul>\n<li>1구간: 1900년 ~ 1999년</li>\n<li>2구간: 2000년 ~ 2019년</li>\n<li>3구간: 2020년 ~ 2022년</li>\n</ul>\n<h5>1구간</h5>\n<p>1900 ~ 1999은 앞의 19가 고정임을 알 수 있습니다. 뒤의 두자리숫자는 00 ~ 99 까지 변화합니다. 따라서 <code>/19[0-9][0-9]/</code> 또는 <code>/19\\d\\d/</code> 또는 <code>/19\\d{2}/</code> 로 나타낼 수 있습니다.</p>\n<p><code>\\d\\d</code> 보다 <code>\\d{2}</code>가 글자수가 많으므로 <code>/19\\d\\d/</code>로 하겠습니다.</p>\n<h5>2구간</h5>\n<p>2000 ~ 2019 는 앞의 20이 고정이며 뒤에서 두번째 숫자는 0 또는 1이며 마지막 자리수는 0~9 입니다. 따라서 <code>/20[01][0-9]/</code> 또는 <code>/20[01]\\d/</code> 로 나타낼 수 있습니다.</p>\n<h5>3구간</h5>\n<p>2020 ~ 2022는 앞의 202가 고정이며 마지막 자리수가 0~2 입니다. 따라서 <code>/202[0-2]/</code> 로 나타낼 수 있습니다.</p>\n<h5>1,2,3구간 조합</h5>\n<p>이 3가지 패턴을 선택 연산자로 나타내 보겠습니다 <code>/19\\d\\d|20[01]\\d|202[0-2]/</code>로 나타낼 수 있습니다. 조금 더 축약을 해보자면 2구간과 3구간의 <code>20</code>이 중복되므로 <code>/19\\d\\d|20([01]\\d|2[0-2])/</code> 로도 할 수 있습니다.</p>\n<h4>유효한 월일을 정규표현식으로 나타내기</h4>\n<p>모든 월의 말일이 동일하지 않습니다. 1,3,5,7,8,10,12월은 31일까지 있고, 4,6,9,11월은 30일까지 있고, 2월은 28일까지 있습니다(윤년은 고려하지 않습니다).</p>\n<p>따라서 3가지 구간으로 나눠서 생각해보겠습니다.</p>\n<ul>\n<li>1구간: 1,3,5,7,8,10,12월</li>\n<li>2구간: 4,6,9,11월</li>\n<li>3구간: 2월</li>\n</ul>\n<h5>1,3,5,7,8,10,12월</h5>\n<p>1,3,5,7,8,10,12월은 01일부터 31일까지 유효한 일입니다.</p>\n<p>먼저 월은 <code>/01|03|05|07|08|10|12/</code>로 나타낼 수 있습니다. 1,3,5,7,8월은 앞의 0이 중복되고 10,12월은 앞의 1이 중복되네요. 이를 축약하면 <code>/0[13578]|1[02]/</code>로 나타낼 수 있습니다.</p>\n<p>01일부터 31일을 01~09일, 10~29일, 30~31일로 나눠서 생각해보겠습니다.\n01~09일은 <code>/0[1-9]/</code>로, 10~29일은 <code>/[12]\\d/</code>로, 30~31일은 <code>/3[01]/</code>로 나타낼 수 있습니다.\n이를 선택연산자로 합치면 <code>/0[1-9]|[12]\\d|3[01]/</code>가 됩니다.</p>\n<p>월과 일을 합쳐보겠습니다. 월과 일 사이에는 <code>-</code>이 있으며 선택 연산자의 우선순위가 접합 연산자보다 낮기 때문에 월과 일 각각의 선택 연산자의 우선순위를 높여주기 위해 월과 일을 각각 괄호로 감싸겠습니다.</p>\n<p><strong><code>/(0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])/</code></strong></p>\n<h5>4,6,9,11월</h5>\n<p>4,6,9,11월은 01일부터 30일까지가 유효한 일입니다.</p>\n<p>월은 <code>/04|06|09|11/</code> 과 같이 나타낼 수 있고 4,6,9월의 앞 글자 0이 중복되므로 <code>/0[469]|11/</code>로 나타낼 수 있습니다.</p>\n<p>일은 1,3,5,7,8,10,12월과 동일하나 31일만 제거하면 됩니다. <code>/0[1-9]|[12]\\d|30/</code>으로 나타낼 수 있습니다.</p>\n<p>따라서 월과 일을 조합하면 <strong><code>/(0[469]|11)-(0[1-9]|[12]\\d|30)/</code></strong> 이 됩니다.</p>\n<h5>2월</h5>\n<p>2월은 01부터 28일까지가 유효한 일입니다.</p>\n<p>01일부터 28일을 01~09일, 10~19일, 20~28일로 나눠서 생각해보겠습니다.\n01~09일은 <code>/0[1-9]/</code>로, 10~19일은 <code>/1\\d/</code>로, 20~28일은 <code>/2[0-8]/</code>로 나타낼 수 있습니다.\n이를 선택연산자로 합치면 <code>/0[1-9]|1\\d|2[0-8]/</code>가 됩니다.</p>\n<p>따라서 월과 일을 조합하면 <strong><code>/02-(0[1-9]|1\\d|2[0-8])/</code></strong> 이 됩니다.</p>\n<h5>유효한 월일 조합</h5>\n<p>유효한 월일을 선택 연산자를 이용하여 합치면 같습니다.</p>\n<p><strong><code>/(0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|02-(0[1-9]|1\\d|2[0-8])/</code></strong></p>\n<h4>유효한 연도와 유효한 월일 합치기</h4>\n<p>유효한 연도와 유효한 월일을 합치면 다음과 같습니다.</p>\n<p><code>/(19\\d\\d|20([01]\\d|2[0-2]))-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|02-(0[1-9]|1\\d|2[0-8]))/</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> re =\n  <span class=\"hljs-regexp\">/(19\\d\\d|20([01]\\d|2[0-2]))-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|02-(0[1-9]|1\\d|2[0-8]))/</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-params\">birthday</span>) {\n  <span class=\"hljs-keyword\">return</span> re.<span class=\"hljs-title function_\">test</span>(birthday);\n}\n\n<span class=\"hljs-comment\">// 연도 검증</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"2999-08-28\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1899-08-28\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-08-28\"</span>)); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// 월 검증</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-00-28\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-13-28\"</span>)); <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">// 일 검증</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-08-32\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-08-00\"</span>)); <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">// 1,3,5,7,8,10,12월 검증</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-01-31\"</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-03-31\"</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-05-31\"</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-07-31\"</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-08-31\"</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-10-31\"</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-12-31\"</span>)); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-comment\">// 4,6,9,11월 검증</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-04-31\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-06-31\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-09-31\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-11-31\"</span>)); <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">// 2월 검증</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-02-28\"</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-02-29\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-02-30\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-02-31\"</span>)); <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-comment\">// 기타</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-35-31\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-03-02\"</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-08-28\"</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-08-32\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-11-30\"</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-11-31\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-02-28\"</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1939-04-28\"</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-02-29\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-00-31\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"2023-00-31\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"2023-01-31\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"2022-01-31\"</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1822-01-31\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1922-01-31\"</span>)); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p>하지만 위의 식에는 치명적인 문제점이 있습니다.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-08-281\"</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"11999-08-28\"</span>)); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p>이게 어찌된 영문일까요? 정규표현식은 문자열의 패턴을 표현하는 방법입니다.</p>\n<p><code>1999-08-281</code> 이라는 주어진 문자열의 부분 문자열 <code>1999-08-28</code> 은 정규표현식이 나타내는 문자열의 패턴과 일치합니다. 따라서 <code>1999-08-281</code>는 해당 정규표현식에 일치합니다.</p>\n<p>우리는 주어진 문자열의 부분 문자열이 아닌 전체 문자열과 일치하는지 확인하고 싶습니다. 그럴 때에 <code>^</code>, <code>$</code> 를 이용해서 해결할 수 있습니다.</p>\n<p><code>^</code>는 문자열의 처음 위치를 나타내며 <code>$</code>은 문자열의 마지막 위치를 나타냅니다. <code>^</code>과 <code>$</code>이 주어진 문자열의 첫번째 문자, 마지막 문자가 아닌 위치임을 주의깊게 봐주세요. 위치 개념은 다음 편의 탐색에서 자세히 다룰 개념입니다. 위치는 문자를 소비하지 않는다는 특징이 있습니다.</p>\n<p>정규표현식의 처음과 끝에 <code>^</code>과 <code>$</code>를 추가해보겠습니다.</p>\n<p><code>/^(19\\d\\d|20([01]\\d|2[0-2]))-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|02-(0[1-9]|1\\d|2[0-8]))$/</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> re =\n  <span class=\"hljs-regexp\">/^(19\\d\\d|20([01]\\d|2[0-2]))-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|02-(0[1-9]|1\\d|2[0-8]))$/</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-params\">birthday</span>) {\n  <span class=\"hljs-keyword\">return</span> re.<span class=\"hljs-title function_\">test</span>(birthday);\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-08-28\"</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"1999-08-281\"</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isValidBirthday</span>(<span class=\"hljs-string\">\"11999-08-28\"</span>)); <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<h2>V. 마무리</h2>\n<p>정규표현식 기본 연산자 3개만으로도 많은 걸 할 수 있습니다. 기본 연산자 외에 탐색, 캡쳐와 같은 기능을 익힌다면 더욱 많은 것들을 정규표현식을 이용하여 할 수 있습니다.</p>\n<p>다만 정규표현식으로 할 수 있다고 하더라도 유지보수성, 가독성 등을 고려하면 정규표현식이 항상 최선의 선택인 것은 아닙니다. 예제2 에서 보다시피 정규표현식을 사용하면 오히려 굉장히 복잡해질 수도 있습니다.</p>\n<p>다음 편에서는 탐색, 캡쳐와 같은 기능을 알아보고 정규표현식에 일치하는 문자열에서 일치하는 부분을 추출하고 치환하는 방법에 대해서 알아보겠습니다.</p>","title":"실무에서 바로 써먹는 정규표현식(1)","date":"2022-05-07","summary":"실무에서 바로 써먹는 정규표현식"}},"__N_SSG":true}