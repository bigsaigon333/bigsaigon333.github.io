{"pageProps":{"postData":{"id":"css-masters-2-week1","contentHtml":"<p><a href=\"https://github.com/fe-backpackers/css-masters-2\">css-masters-2</a> 라는 이름으로 css 스터디를 하고 있습니다.</p>\n<p>모던 웹을 위한 HTML5 + CSS3 바이블 3판을 매주 정해진 분량만큼 읽고 의견을 공유하는 방식입니다.</p>\n<p>아래는 1주차에 학습한 내용 등을 정리한 것입니다.</p>\n<hr>\n<h2>웹 표준은 W3C에서 만듭니다</h2>\n<p>웹 표준은 W3C에서 만듭니다. 여기서 웹은 HTML, CSS, JS, 웹 브라우져, WebAssembly, 접근성 등 웹과 관련된 모든 것을 의미합니다.\n다만, HTML 표준은 WHATWG 에서, JS 표준은 ECMA 에서, 3D Graphics의 표준은 Khronos 에서 작성합니다.</p>\n<p><a href=\"https://www.w3.org/TR/\">https://www.w3.org/TR/</a> 에서 표준을 검색할 수 있습니다.</p>\n<p>W3C는 일정 프로세스에 따라서 웹 기술에 대한 기술을 문서화하고 이를 Recommendations 로 발행하는데, 이것이 웹 표준으로 간주됩니다.</p>\n<p><a href=\"https://www.w3.org/standards/faq.html#std\">https://www.w3.org/standards/faq.html#std</a></p>\n<h3>참고</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/The_web_and_web_standards#web_standards\">https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/The_web_and_web_standards#web_standards</a></p>\n<h2>단독으로 사용되는 태그: void 요소</h2>\n<p><a href=\"https://html.spec.whatwg.org/#elements-2\">HTML 표준</a>에 따르면, HTML 요소(element)는 여섯 개의 카테고리로 구별이 되는데, 그중 br, hr, img, input 등 시작 태그만 존재하는 요소를 void 요소 로 분류합니다.</p>\n<p>따라서 이들 void 요소는 <code>&#x3C;br></code>, <code>&#x3C;hr></code>, <code>&#x3C;img></code> 와 같이 시작 태그만을 작성하는 것이 웹표준입니다.</p>\n<p>다만, XHTML5에서는 <code>&#x3C;br /></code>, <code>&#x3C;hr /></code>, <code>&#x3C;img /></code> 와 같이 표기하는데, void 요소를 시작 태그만 있고 끝 태그가 없는 것으로 오인하지 않게 하기 때문에 가독성이 더 좋아 많은 개발자들이 void 요소를 XHTML5 표기법으로 기재합니다. 이러한 표기법을 웹표준에서는 self-closing tag라고 칭하며, 이는 Foreign 요소에서 허용되는 표기법입니다.</p>\n<p><a href=\"https://validator.w3.org/\">W3C Markup Validation Service</a>에서 void 요소를 XHTML5 표기법(self-closing tag)으로 작성하여도 유효한 것으로 판정합니다.</p>\n<p>또한 JSX 에서는 void 요소 뿐만이 아니라 자식 요소가 없는 요소들은 모두 XHTML5 표기법(self-closing tag)으로 나타낼 수 있습니다.\n(예시: <code>&#x3C;Component {...props} /></code>)</p>\n<h2>요소(element) vs 태그(tag)</h2>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>Hello World<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<p>위와 같은 div 요소가 있습니다. <code>&#x3C;div></code> 는 div 요소의 시작 태그입니다. <code>&#x3C;/div></code>는 div 요소의 끝 태그입니다. 즉, <code>&#x3C;div>Hello World&#x3C;/div></code>는 <code>Hello World</code>라는 TextContent를 가졌으며 시작 태그를 <code>&#x3C;div></code>로 하고 끝 태그를 <code>&#x3C;/div></code>로 하는 div HTML요소입니다. 요소가 실체라면 태그는 표현입니다.\n즉, 태그는 HTML 요소를 문자열으로 나타낸 것이라고 봐도 좋습니다. html 마크업을 할 때에는 요소와 태그를 혼용해서 사용해도 헷갈리지 않으나, js 에서 동적으로 생성하는 요소들(예시: <code>const div = document.createElement(\"div\")</code>)은 태그라는 표현이 맞지 않습니다. js에서는 이러한 요소를 DOM 트리에 추가하여 DOM에 반영하지만, 실제로 HTML 파일에 문자열을 추가하는 건 아니기 때문입니다.</p>\n<h3>참고</h3>\n<p><a href=\"https://html.spec.whatwg.org/#start-tags\">https://html.spec.whatwg.org/#start-tags</a></p>\n<h2>a 요소에 href 속성은 반드시 있어야 하는가?</h2>\n<p>href 속성은 하이퍼링크의 주소를 나타냅니다.</p>\n<p>a 요소가 href 속성을 가지고 있으면 a 요소의 컨텐츠로 라벨링된 하이퍼링크를 의미합니다.</p>\n<p>a 요소에 href 속성이 없다면, a 요소는 a 요소의 컨텐츠와 관련된 링크애 대한 <strong>플레이스홀더</strong>를 나타냅니다.</p>\n<p>예를 들어 현재 /examples 라우트에 있다면 nav에서 /examples로 가는 a 요소의 href 속성을 비워둘 수 있습니다.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>></span>Home<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/news\"</span>></span>News<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span>></span>Examples<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/legal\"</span>></span>Legal<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n</code></pre>\n<p>※ href 속성이 있을 때만 a 요소는 interactive content 카테고리에 속하게 됩니다.</p>\n<p><a href=\"https://html.spec.whatwg.org/#the-a-element\">https://html.spec.whatwg.org/#the-a-element</a></p>\n<h2>img 요소의 width, height 속성 vs css width, height 속성</h2>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span>></span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">img</span> {\n    <span class=\"hljs-attribute\">max-width</span>: <span class=\"hljs-number\">100%</span>;\n    <span class=\"hljs-attribute\">height</span>: auto;\n  }\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Your title<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Introductory paragraph.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"parent\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"hero_image.jpg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">\"500\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"500\"</span> /></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Lorem ipsum dolor sit amet, consectetur…<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n</code></pre>\n<p><code>height=\"500\" width=\"500\"</code> 가 <code>max-width: 100%; height: auto;</code> 보다 우선순위가 낮다. 따라서 최초 img 로드시에는 height를 알 수 없기 때문에 <code>height: auto</code> 가 의도했던 대로 동작하지 않아 레이아웃 시프트가 발생하게 된다.</p>\n<p>이러한 문제를 해결하기 위해 <code>padding-bottom</code> trick이 주로 사용되었으며 최근에는 CSS에 추가된 <code>aspect-ratio</code> 속성을 이용하여 해결할 수도 있다.</p>\n<p>자세한 내용은 <a href=\"https://www.smashingmagazine.com/2020/03/setting-height-width-images-important-again/\">블로그</a>를 참고하시기 바랍니다.</p>\n<h2>source 요소의 type 속성</h2>\n<p>source 요소의 부모 요소가 picture 요소인 경우, type 속성이 지정되어야 합니다.</p>\n<p>type 속성이 지정된 경우, 웹 브라우저는 type 속성을 보고 지원하지 않는 타입이라면 해당 이미지를 fetching하는 것을 스킵합니다.\ntype 속성이 지정되지 않은 경우, 웹 브라우저는 이미지를 fetching한 후에야 해당 이미지 형식을 지원하는지 아닌지 알 수 있습니다. 또한 fetching 한 이미지 형식을 지원하지 않더라도 다른 source 요소를 선택하지 않습니다.\n따라서 다양한 이미지 형식 중 웹 브라우저가 지원하는 이미지 형식을 보여주고자 할 때에는 source 요소에 반드시 type 특성을 지정해주어야 합니다.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">picture</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">srcset</span>=<span class=\"hljs-string\">\"/media/cc0-images/surfer-240-200.webp\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"image/webp\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">srcset</span>=<span class=\"hljs-string\">\"/media/cc0-images/surfer-240-200.png\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"image/png\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">srcset</span>=<span class=\"hljs-string\">\"/media/cc0-images/surfer-240-200.jpg\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"image/jpeg\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/media/cc0-images/surfer-240-200.jpg\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"surfer\"</span> /></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">picture</span>></span>\n</code></pre>\n<h3>참고</h3>\n<p><a href=\"https://html.spec.whatwg.org/#the-source-element\">https://html.spec.whatwg.org/#the-source-element</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types\">https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types</a></p>\n<h2>전체 선택자(Universal selector): <code>*</code></h2>\n<p>전체 선택자를 사용하면 html 요소를 포함해 head 요소, title 요소, style 요소 등 문서 내 모든 단일 요소가 선택됩니다. (가상 요소는 선택되지 않습니다)</p>\n<h3>참고</h3>\n<p><a href=\"https://drafts.csswg.org/selectors-3/#universal-selector\">https://drafts.csswg.org/selectors-3/#universal-selector</a></p>\n<h2>기본 속성과 속성 선택자</h2>\n<p>CSS는 HTML 요소의 기본 속성이 무엇인지 관심을 갖지 않습니다.</p>\n<p>input 요소에 type을 명시하지 않으면 기본값으로 text가 할당되지만, CSS는 이를 신경쓰지 않기 때문에 명시적으로 type=\"text\" 를 지정하지 않은 input 요소에는 스타일이 적용되지 않습니다.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span>></span><span class=\"css\">\n      <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">\"text\"</span>]</span> {\n        <span class=\"hljs-attribute\">background</span>: blue;\n      }\n    </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span>></span>\n      <span class=\"hljs-comment\">&#x3C;!-- 배경색 없음 --></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> /></span>\n      <span class=\"hljs-comment\">&#x3C;!-- 배경색 파랑 --></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> /></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span>\n</code></pre>","title":"css-masters-2 1주차 정리","date":"2022-05-08"}},"__N_SSG":true}