{"pageProps":{"postData":{"id":"draft:js-algorithm-ch7","contentHtml":"<h2>7-1. 재귀란?</h2>\n<p>재귀 함수란 자기자신을 호출하는 함수를 의미한다.</p>\n<h3>기저 조건</h3>\n<p>자기자신을 호출하는 함수가 왜 필요하지 라고 생각할 수 있다.</p>\n<p>재귀를 잘못 쓰면 무한재귀에 빠진다.</p>\n<p>자기 자신을 호출하는데... 호출이 종료되는 조건이 명확하지 않으면 계속해서 반복해서 자기 자신을 호출하게 되어서... 먹통이 된다.</p>\n<p>따라서 호출을 종료하는 조건!이 매우 중요하다.</p>\n<p>함수가 반복되지 않게 호출을 종료하는 조건을 기저조건(Base Case)이라고 한다. 모든 재귀 함수에는 무한대로 호출되지 않게 하는 기저 조건이 적어도 하나 있어야 한다.</p>\n<h3>재귀의 숨은 공간복잡도</h3>\n<p>그리고 계속해서 반복해서 자기자신을 호출하다보면...Maximum call stack overflow 라는 메세지를 보게 될 것이다.</p>\n<p>무한루프를 생각해보자. 무한루프에 빠지면 프로그램이 종료되나? 그렇지 않다. (웹브라우져에서는 무한루프에 빠지면 경고창을 내준다)</p>\n<p>재귀함수를 다시 살펴보자</p>\n<p>함수가 다시 자기자신을 호출할 때 그 함수가 종료되었는가? 아니다. 아직 종료되지 않았다. 아직 다 실행하지 않았는데 다음 자기자신을 실행하는 것이다.\n이 정보를 어떻게 기록해야 할까? factorial(1)이 끝나면 다시 돌아가 factorial(2)를 마저 실행해야 한다는 사실을 어떻게든 기억해야 한다.</p>\n<p>컴퓨터는 스택을 이용해서 어떤 함수를 호출 중인지 기록한다. 이 스택을 호출 스택(call stack)이라 부른다.</p>\n<p>스택에는 가장 위 원소만 팝할 수 있다는 제약이 있다. 가장 위 원소는 가장 최근에 호출된 함수, 즉 컴퓨터가 다음으로 마무리해야 할 함수이니 이러한 제약은 재귀에 이상적이다.\n마지막에, 즉 가장 최근에 호출했던 함수를 가장 먼저 완료해야 하므로 LIFO와 맞아 떨어진다.</p>\n<h2>7-2. 재귀적 사고방식 익히기</h2>\n<p>for문은 모두 재귀로 대체할 수 있으나\n재귀를 모두 for문으로 대체할 수 없다.</p>\n<p>참고) 꼬리물기 최적화\n꼬리물기 최적화된 재귀는 모두 for문으로 기계적으로 변경할 수 있다.</p>\n<p>재귀는 명쾌한 코드를 작성해 줄 수 있는 하나의 도구다.</p>\n<h3>반복 실행</h3>\n<p>동일한 행동을 반복해서 실행할 때 재귀를 이용할 수 있다.</p>\n<p>caller 에서 callee에 값을 전달할 때에는 함수 인자를 이용한다. 원시자료형이면 함수 인자로 전달하면 충분하다.\n참조타입인 경우에는 함수 인자로 전달할 때 복사해서 주거나, 내용물을 변경한 후 넘긴다. 내용물을 변경하여 넘겼다면 callee의 호출이 종료된 후에 다시 내용물을 원래대로 돌려야 한다.\n그렇지 않으면 다른 재귀 호출에 영향을 미친다.\n따라서 복사본을 전달하는게 제일 간단하다. 하지만, 공간복잡도 측면에서 엄청난 마이너스. 어쩔 수 없다.\n원시자료형으로 풀어서 넘기거나, 참조타입의 값을 변경 => 전달 => 원복 을 거친다</p>\n<h3>재귀적 사고</h3>\n<ol>\n<li>이미 완성되어 있다고 가정.\n<ul>\n<li>필요한 변수들은 이미 존재한다고 가정. 인자로 제공될 수도 있고 반환값일 수도 있다.</li>\n<li>인자로 제공되었다면 계산값도 인자로 똑같이 제공해줘야 한다. caller가 callee에게 전달</li>\n<li>반환값으로 제공되었다면 계산값도 똑같이 반환값으로 반환해줘야 한다. callee가 caller에게 전달</li>\n</ul>\n</li>\n<li>한 단계 나가야 할 때 무엇을 해야하는지, 변화에 초점\n<ol>\n<li>다음 단계에 참조값을 전달할 때 주의하자.\n참조값의 값을 변경하여 다음 단계에 전달한다면 반드시 다음 단계 종료후 원상복구한다. 그러지 않으면 다른 호출에 영향을 준다.</li>\n<li>다음 단계에 전달할 값들은 인자에 추가해라. 1과 일맥상통.\n<ul>\n<li>변하는 값은 인자에 추가하되, 변하지 않는 값은 상위 스코프에서 그대로 참조해도 괜찮다. (다만 너무 상위 스코프가 넓다면 스콥 좁히기를 검토하자)</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>기저조건을 검토한다.</li>\n</ol>\n<h3>하향식 재귀적 사고</h3>\n<p>하향식: 하위 문제의 계산 결과에 기반해 계산한다.</p>\n<p>하위문제는 입력을 더 작게 한 똑같은 문제이다.</p>\n<p>호출을 하위로 쭉 해놓고, 위 올라가면서 문제를 해결한다.</p>\n<ol>\n<li>이미 하위 문제들이 완성되어 있다고 가정.\n<ul>\n<li>하위 문제들의 값은 반환값으로 제공된다.</li>\n</ul>\n</li>\n<li>하위 문제들의 값을 조합해서 현재 단계의 문제를 어떻게 풀지에 초점\n<ul>\n<li>계산값도 똑같이 반환해줘야 한다.</li>\n</ul>\n</li>\n<li>기저조건을 검토한다.</li>\n</ol>\n<p>상향식에서는 루프를 쓰든 재귀를 쓰든 같은 전략으로 계산한다. 즉 계산 방식이 같다.\n단, 하향식에서는 재귀를 써야 한다. 하향식 전략을 구현할 방법은 재귀뿐이다.\n하향식 사고방식은 문제를 해결하는 새로운 사고 전략을 제공한다. 재귀적 하향식 방식은 문제를 완전히 다른 방식으로 생각하게 해준다.</p>\n<h3>상향식 재귀적 사고</h3>\n<ol>\n<li>\n<p>다음 단계를 호출해가면서 문제를 해결한다.</p>\n<ul>\n<li>\n<p>즉, 하위 문제가 완성되어있다고 가정할 필요가 없다.</p>\n</li>\n<li>\n<p>필요한 변수들은 이미 존재한다고 가정. 인자로 제공된다.</p>\n</li>\n<li>\n<p>계산값도 인자로 똑같이 제공해줘야 한다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>다음 단계로 나가야 할때 무엇을 해야하는지 변화에 초점.</p>\n<ol>\n<li>\n<p>최종 목표를 이루기 위해 이번 단계에서 수행해야 할 것이 무엇인가.</p>\n</li>\n</ol>\n<ul>\n<li>필요한 값들을 모두 인자로 가지고 있다고 가정한다.</li>\n<li>필요한 값과 다음 단계에 전달할 값이 동일하다.\n<ul>\n<li>\n<p>변하는 값은 인자에 추가하되, 변하지 않는 값은 상위 스코프에서 그대로 참조해도 괜찮다. (다만 너무 상위 스코프가 넓다면 스콥 좁히기를 검토하자)</p>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>다음 단계에 참조값을 전달할 때 주의하자.\n참조값의 값을 변경하여 다음 단계에 전달한다면 반드시 다음 단계 종료후 원상복구한다. 그러지 않으면 다른 호출에 영향을 준다.</li>\n</ol>\n</li>\n<li>\n<p>기저조건을 검토한다.</p>\n<ul>\n<li>최종 목표가 완성이 되었을 때가 기저조건이다.</li>\n</ul>\n</li>\n</ol>\n<p>상향식은 항상 각 문제가 전체 문제를 알고 있다.\n그에 반해 하향식은 문제 자체가 하위 문제로 바뀐다.</p>\n<p>상향식은 N단계에서 뭘 할지 고민할 때\nN-1 단계에서 뭐를 전달받고, N단계에서 뭐를 수행해서 N+1 단계에 넘겨줘야 할지 잘 고민해야 한다.</p>\n<p>N단계에서 N+1 단계를 여러번 호출할 수 있다. 즉, N단계가 여러 개의 N+1 단계를 만들어 낼 수 있다.</p>\n<p>그렇기 때문에 각각의 N+1 단계에서 혼란이 생기지 않도록 스콥을 제한하는게 굉장히 중요하다. 원시타입 베스트. 참조타입은 새로 생성하기 => 공간복잡도, 시간복잡도 측면에서 (-)가 되기 때문에 참조타입 공유하는 법도 알아야 한다.\n다만, 공부할 때는 성능 신경쓰지말고 이렇게 해라. 일단 되게 하고 문제되는 부분을 인식한다음에 그부분만 수정하면 된다.</p>\n<pre><code>// 필요한 값이 반환값으로 제공됨 => 하향식. callee 가 caller에게 전달\nfunction factorial(n) {\n  if (n === 0) return 1;\n\n  return n * factorial(n - 1);\n}\n\n// 필요한 값이 인자로 제공됨 => 상향식. caller가 callee에게 전달\nfunction factorial(n, acc = 1, i = 0) {\n  if (i === n) return acc;\n\n  return factorial(n, n * acc, i + 1);\n}\n</code></pre>\n<pre><code>function sum(n) {\n  if (n === 0) return 0;\n\n  return n + sum(n - 1);\n}\n\nsum(100);\n\nfunction sum(n, k = 0, acc = 0) {\n  if (k === n) return acc;\n\n  return sum(n, k + 1, acc + k);\n}\n\nsum(100);\n</code></pre>\n<h2>7-3. 문제풀이</h2>\n<h3>기초 피보나치수열</h3>\n<p>https://www.acmicpc.net/problem/10870</p>\n<p>있는 그대로 풀어본다</p>\n<p>https://www.acmicpc.net/problem/2747</p>\n<p>10870번 답을 제출해보면 시간초과가 뜨는 걸 보여준다.</p>\n<p>이를 해결하는 방법으로 나중에 dp를 배울 것이란걸 말한다.</p>\n<h3>팩토리얼</h3>\n<p>https://www.acmicpc.net/problem/10872</p>\n<p>for문을 대체하는 재귀</p>\n<p>주의점: N이 엄청 커지면 Number.MAX_SAFE_INTEGER 를 넘어갈 수 있다. 그러면 BigInt 써야함</p>\n<h3>재귀 중급 - 백트래킹</h3>\n<p>https://www.acmicpc.net/problem/15658</p>\n<p>visited 배열 vs 원시자료형으로 파악</p>\n<p>visited 배열으로 하는 경우 1번째 \"+\" 과 2번째 \"+\"를 다른 것으로 인식한다.\n풀어헤친 다음에 true/false 하는 것보다 숫자를 세는 것이 정확하다.</p>\n<p>시간초과, 메모리 차원에서 어떤 문제가 있는지?</p>\n<h3>재귀 - 브루트 포스</h3>\n<p>https://www.acmicpc.net/problem/16198</p>\n<ul>\n<li>\n<p>최적해를 구하려고 너무 시간 쓰지마라</p>\n</li>\n<li>\n<p>시간복잡도 공간복잡도 따졌을 때 브루트 포스로 되면 그걸로 해결</p>\n</li>\n<li>\n<p>공유되는 상태를 많이 만들면 복잡도가 증가한다</p>\n</li>\n</ul>\n<p>특히 순열,조합 과 같은 문제에서 공유되는게 있으면 굉장히 복잡해진다.</p>\n<h3>재귀 - 브루트 포스</h3>\n<p>https://www.acmicpc.net/problem/16197</p>\n<p>BFS로 풀면 더 좋은 성능이 나오겠지만..</p>\n<p>4 ** 10 정도면 브루트 포스로 풀어도 괜찮게 풀린다.</p>\n<h3>조합 - 상향식, 하향식 비교</h3>\n<p>https://www.acmicpc.net/problem/14889</p>\n<ol>\n<li>상향식, 하향식 비교</li>\n</ol>\n<p>하향식은 엄청나게 성능적으로 불리하다. 공간복잡도는 더욱더.\n하위 문제가 항상 완성되기 때문에 그 결과에 대한 공간이 매번 필요하기 때문.</p>\n<p>상향식은 하나씩 만들어가기 때문에 기존꺼에 추가할 수 있다.</p>\n<ol start=\"2\">\n<li>원시자료형, 참조타입 비교</li>\n</ol>\n<h3>재귀 - 하향식</h3>\n<p>분할 정복</p>\n<p>하향식 문제의 정석.</p>\n<p>뭐가 부분문제인지 잘 파악해야한다. 이미 부분문제는 완성되어 있다.</p>\n<p>부분문제랑 인터페이스는 일치해야한다.</p>\n<p>부분문제 하향식에서는 하위 문제의 값을 반환값으로 전달받는다.</p>\n<p>https://www.acmicpc.net/problem/1074</p>\n<h3>순열</h3>\n<p>상향식</p>\n<p>참조값 매번 새로 만들기 => 참조값 공유하기로 성능 향상</p>\n<p>https://www.acmicpc.net/problem/10819</p>\n<p>순열, 조합은 백트래킹 에서 다루기도 하는데, 재귀로 간단하게 맛보기만 보고 간다.</p>\n","title":"Ch07. 재귀","date":"2020-03-16","summary":"재귀"}},"__N_SSG":true}